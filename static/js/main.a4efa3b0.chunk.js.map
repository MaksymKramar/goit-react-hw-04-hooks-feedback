{"version":3,"sources":["components/Statistics/Statistics.style.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.style.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.style.js","components/Notification/Notification.js","App.jsx","index.js"],"names":["SpanName","styled","span","Statistics","good","neutral","bad","total","positivePercentage","Button","button","FeedbackOptions","buttons","onLeaveFeedback","map","btn","i","type","onClick","Section","title","children","Text","p","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","className","btnName","changeStateValue","prevState","Math","round","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAEaA,EAAWC,IAAOC,KAAV,gE,OCyBNC,I,EAAAA,EAtBf,YAAsE,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,IAAIC,EAA4B,EAA5BA,MAAMC,EAAsB,EAAtBA,mBAE7C,OACE,gCACE,eAACR,EAAD,oBAAkBI,KAClB,eAACJ,EAAD,uBAAoBK,KACpB,eAACL,EAAD,mBAAgBM,KAChB,eAACN,EAAD,oBAAiBO,KACjB,eAACP,EAAD,gCAA6BQ,EAA7B,YCXOC,EAASR,IAAOS,OAAV,+ECiBJC,MAbf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAEhC,OACI,8BACKD,EAAQE,KAAI,SAACC,EAAKC,GAAN,OACT,cAACP,EAAD,CAAgBQ,KAAK,SAASC,QAAS,kBAAML,EAAgBE,IAA7D,SACKA,GADQC,SCGdG,I,EAAAA,EAXf,YAAoC,IAAlBC,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,SACpB,OACI,8BACI,oCACN,6BAAKD,IACJC,QCNMC,EAAOrB,IAAOsB,EAAV,gDCSFC,MARf,YAAkC,IAAXC,EAAU,EAAVA,QACnB,OACI,8BACI,cAACH,EAAD,UAAOG,OC0CJC,MAvCf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOvB,EAAP,KAAawB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOtB,EAAP,KAAgBwB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOrB,EAAP,KAAYwB,EAAZ,KAeMC,EAAqB,kBAAM3B,EAAOC,EAAUC,GAMlD,OACE,sBAAK0B,UAAU,YAAf,UACE,cAAC,EAAD,CAASZ,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBR,QAAS,CAAC,OAAQ,UAAW,OAAQC,gBAtBvC,SAAAoB,GAEnB,IAAMC,EAAmB,SAAAC,GAAS,OAAIA,EAAY,GAElC,SAAZF,EACFL,EAAQM,GACa,YAAZD,EACTJ,EAAWK,GAEXJ,EAAOI,QAeP,cAAC,EAAD,CAASd,MAAM,aAAf,SACGW,IAAuB,EACnB,cAAC,EAAD,CAAY3B,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOwB,IAAsBvB,mBAV1F4B,KAAKC,MAAc,IAAPjC,EAAc2B,OAWjB,cAAC,EAAD,CAAcN,QAAQ,4BASnCtB,EAAWmC,aAAe,CACxB9B,mBAAoB,KC/CtB+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a4efa3b0.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const SpanName = styled.span`\r\ndisplay: block;\r\nmargin-top: 25px;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { SpanName, } from './Statistics.style';\r\n\r\nfunction Statistics({ good, neutral, bad,total,positivePercentage }) {\r\n   \r\n  return (\r\n    <div>\r\n      <SpanName>Good: { good}</SpanName>\r\n      <SpanName>Neutral: {neutral}</SpanName>\r\n      <SpanName>Bad: {bad}</SpanName>\r\n      <SpanName>Total:{total}</SpanName>\r\n      <SpanName>Positive feedback:{positivePercentage} %</SpanName>\r\n      \r\n    </div>   \r\n  )  \r\n}\r\n\r\n  \r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\nexport default Statistics\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Button = styled.button`\r\nwidth: 100px;\r\nheight: 25px;\r\nmargin-right: 15px;\r\n`;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Button,} from './FeedbackOptions.style'\r\n\r\n\r\n\r\nfunction FeedbackOptions({ buttons, onLeaveFeedback }) {\r\n\r\n    return (\r\n        <div>\r\n            {buttons.map((btn, i) => (\r\n                <Button key={i} type=\"button\" onClick={() => onLeaveFeedback(btn)}>\r\n                    {btn}\r\n                </Button>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FeedbackOptions\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\n\r\n\r\nfunction Section({title,children}) {\r\n    return (\r\n        <div>\r\n            <section >\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Section\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Text = styled.p`\r\nfont-size: larger;\r\n`;","import React from 'react';\r\nimport{Text,} from './Notification.style'\r\n\r\nfunction Notification({message}) {\r\n    return (\r\n        <div>\r\n            <Text>{message}</Text>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import './App.css';\n\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions.js';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nimport { useState } from 'react'\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const btnIncrement = btnName => {\n\n    const changeStateValue = prevState => prevState + 1;\n\n    if (btnName === 'good') {\n      setGood(changeStateValue);\n    } else if (btnName === 'neutral') {\n      setNeutral(changeStateValue);\n    } else {\n      setBad(changeStateValue)\n    }\n  };\n\n  const countTotalFeedback = () => good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = () =>\n    Math.round((good * 100) / countTotalFeedback());\n\n\n  return (\n    <div className='container'>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions buttons={[\"good\", \"neutral\", \"bad\"]} onLeaveFeedback={btnIncrement}></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() > 0\n          ? (<Statistics good={good} neutral={neutral} bad={bad} total={countTotalFeedback()} positivePercentage={countPositiveFeedbackPercentage()} />)\n          : (<Notification message=\"No feedback given\"></Notification>)\n        }\n      </Section>\n    </div>\n  )\n}\n\nexport default App\n\nStatistics.defaultProps = {\n  positivePercentage: 100\n};\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}